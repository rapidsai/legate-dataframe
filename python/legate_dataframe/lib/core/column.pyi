# Copyright (c) 2023, NVIDIA CORPORATION. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

from typing import Any

import cudf
import legate.core
import pyarrow as pa
from cudf._typing import DtypeObj
from legate.core import StoreTarget
from pylibcudf.column import Column as PylibcudfColumn
from pylibcudf.scalar import Scalar as PylibcudfScalar

from legate_dataframe.lib.core.data_type import DataType

_CudfTypes = (
    cudf.core.column.column.ColumnBase
    | cudf.core.series.Series
    | PylibcudfColumn
    | PylibcudfScalar
)

class LogicalColumn:
    def __init__(self, obj: Any) -> None: ...
    @staticmethod
    def from_cudf(col: _CudfTypes) -> LogicalColumn: ...
    @staticmethod
    def from_arrow(col: pa.Array) -> LogicalColumn: ...
    @staticmethod
    def empty_like_logical_column(col: LogicalColumn) -> LogicalColumn: ...
    def num_rows(self) -> int: ...
    def type(self) -> DataType: ...
    def dtype(self) -> DtypeObj: ...
    def is_scalar(self) -> bool: ...
    def get_logical_array(
        self, *, check_dtype: bool = False
    ) -> legate.core.LogicalArray: ...
    @property
    def __legate_data_interface__(self) -> dict: ...
    def to_array(self, *, writeable=False) -> Any: ...
    def get_arrow(self) -> pa.array: ...
    def to_cudf(self) -> cudf.core.column.column.ColumnBase: ...
    def to_cudf_scalar(self) -> cudf.Scalar: ...
    def offload_to(target_mem: StoreTarget) -> None: ...
    def slice(self, slice_) -> LogicalColumn: ...
    def repr(self, max_num_items: int) -> str: ...
    def __repr__(self) -> str: ...
    def __getitem__(self, slice_) -> LogicalColumn: ...
    def add_as_next_task_input(self, task: legate.core.AutoTask) -> None: ...
    def add_as_next_task_output(self, task: legate.core.AutoTask) -> None: ...
